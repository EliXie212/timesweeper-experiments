import pandas as pd

IDs, = glob_wildcards("bams/faw/{id}.bam")
#ref build: https://ftp.ncbi.nlm.nih.gov/genomes/archive/old_genbank/Eukaryotes/vertebrates_mammals/Homo_sapiens/GRCh37/Primary_Assembly/assembled_chromosomes/FASTA/
#https://ftp.ncbi.nlm.nih.gov/genomes/archive/old_genbank/Eukaryotes/vertebrates_mammals/Homo_sapiens/GRCh37/special_requests/

def sort_bams(samps_file="samp_data/filtered_samps.tsv"):
    dates_df = pd.read_csv(samps_file, sep="\t")
    sorted_bams = dates_df.sort_values("mean_dates", ascending=False)["submitted_ftp"]
    sorted_ids = [i.split(".bam")[0].split("/")[-1] for i in sorted_bams]
    return sorted_ids


rule all:
    input:
        "vcfs/ts_merged.vcf"

rule download_ref:
    output:
        "ref/GRCh37-lite.fa.bgz",
        "ref/GRCh37-lite.fa.bgz.fai",
        "ref/GRCh37-lite.fa.bgz.gzi"
    shell:
        """
        mkdir ref
        cd ref
        wget https://ftp.ncbi.nlm.nih.gov/genomes/archive/old_genbank/Eukaryotes/vertebrates_mammals/Homo_sapiens/GRCh37/special_requests/GRCh37-lite.fa.gz
        gzip -cd | bgzip -c > GRCh37-lite.fa.bgz
        samtools faidx GRCh37-lite.fa.bgz
        """

rule prep_bams:
    input:
        "bams/raw/{id}.bam"
    output:
        "bams/sorted/{id}.sorted.bam",
    threads: 4
    shell:
        """
        samtools sort \
            -@ {threads} \
            {input} \
            -o {output}
        
        samtools index \
            -@ {threads} \
            {output}
        """
        
rule pileup:
    input:
        "bams/sorted/{id}.sorted.bam"
    output:
        "vcfs/{id}.vcf"
    threads: 4
    shell:
        """
        bcftools mpileup -Ou \
            {input} \
            -f ref/GRCh37-lite.fa.bgz \
            -o {output} \
            --threads {threads}
        """

rule call:
    input:
        "vcfs/{id}.vcf"
    output:
        "vcfs/{id}_calls.vcf.bgz"
    threads: 2
    shell:
        """
        bcftools call \
            --threads {threads} \
            -mv \
            -Oz \
            {input} > {output}
        
        """

rule index_vcf:
    input:
        "vcfs/{id}_calls.vcf.bgz"
    output:
        "vcfs/{id}_calls.vcf.bgz.csi"
    threads: 1
    shell:
        """
        bcftools index {input}
        """

rule merge:
    input:
        vcfs=expand("vcfs/{id}_calls.vcf.bgz", id=sort_bams()),
        indices=expand("vcfs/{id}_calls.vcf.bgz.csi", id=sort_bams())
    output:
        "vcfs/ts_merged.vcf"
    threads: all
    shell:
        """
        bcftools merge -Ov --threads {threads} --force-samples -0 {input.vcfs} > {output}
        """

